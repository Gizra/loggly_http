<?php

/**
 * @file
 * Logs HTTP module.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Component\Utility\Crypt;
use Drupal\Core\Utility\Error;
use Drupal\logs_http\Logger\LogsHttpLogger;

/**
 * Provides custom PHP exception handling.
 *
 * Uncaught exceptions are those not enclosed in a try/catch block. They are
 * always fatal: the execution of the script will stop as soon as the exception
 * handler exits.
 *
 * @param $exception
 *   The exception object that was thrown.
 *
 * @see _drupal_exception_handler()
 */
function _logs_http_exception_handler($exception) {
  require_once DRUPAL_ROOT . '/core/includes/errors.inc';

  try {
    // Log the message to the watchdog and return an error page to the user.
    _drupal_log_error(_logs_http_decode_exception($exception), TRUE);
  }
    // PHP 7 introduces Throwable, which covers both Error and
    // Exception throwables.
  catch (\Throwable $error) {
    _drupal_exception_handler_additional($exception, $error);
  }
    // In order to be compatible with PHP 5 we also catch regular Exceptions.
  catch (\Exception $exception2) {
    _drupal_exception_handler_additional($exception, $exception2);
  }
}

/**
 * Decodes an exception and retrieves the correct caller.
 *
 * @param $exception
 *   The exception object that was thrown.
 *
 * @return array
 *   An error in the format expected by _drupal_log_error().
 *
 * @see _drupal_decode_exception()
 */
function _logs_http_decode_exception($exception) {
  $return = Error::decodeException($exception);

  // We have to serialize and encode the array here to prevent a notice in
  // theme_dblog_message(). We will decode the string back in
  // logs_http_watchdog()
  $return['exception_trace'] = Crypt::hashBase64(serialize($exception->getTrace()));

  return $return;
}

/**
 * Runs on shutdown to clean up and display developer information.
 *
 * LogsHttpEventSubscriber registers this function as a shutdown function.
 */
function logs_http_shutdown() {
  /** @var LogsHttpLogger $logs_http_logger */
  $logs_http_logger = \Drupal::service('logs_http.logs_http_logger');
  if (!$logs_http_logger->isEnabled()) {
    return;
  }

  if (!$events = $logs_http_logger->getEvents()) {
    return;
  }

  $url = $logs_http_logger->getUrl();

  // Send events to logs.
  foreach ($events as $event) {
    $client = \Drupal::httpClient();

    try {
      // Send data to Logs.
      $response = $client->post($url, ['data' => Json::encode($event)]);
    }
    catch (\GuzzleHttp\Exception\RequestException $e) {}
  }
}
